ArrayList<Track> augTracks = new ArrayList<>();
        for (Track tr : tracks) {augTracks.add(tr);}    // Create arraylist deepish copy of tracks so we can augment
        HashMap<BuildingID, Building> augBuilding = new HashMap<>();
        for (BuildingID id : buildingTable.keySet()) {  // Create a deep(ish) copy of the array so we can modify it
            augBuilding.put(id, buildingTable.get(id));
        }
        HashMap<Track, Integer> currFlow = new HashMap<>();
        for (Track tr : tracks) { currFlow.put(tr, 0); }    // Each track now contains a currFlow field
        // When currFlow = capacity, remove it from the array we feed into the BFS

        // Do the Edmonds-Karp algorithm
        ArrayList<BuildingID> shortest = this.shortestPath(start, end,  augBuilding, augTracks);    // The first BFS
        while (!(shortest.isEmpty())) {
            // Adjust flow values and remove pipes from BFS when they have no more flow avaliable
            // Bottleneck calc
            int bottleNeck = -1;
            ArrayList<Track> currTracks= getTracks(shortest, start);
            //System.out.println("Currtracks: "+currTracks);

            // Calculate the bottleneck value of the track
            for (Track tr : currTracks) {
                int poten = tr.capacity() - currFlow.get(tr);   // Avaliable max flow
                if (poten < bottleNeck || bottleNeck == -1) { bottleNeck = poten; }
            }
            //System.out.println(bottleNeck);
            if (bottleNeck == -1) {System.out.println("Bottleneck is till -1 :("); return -1;}

            // Aug all tracks on the path - remove them if they have no more capacity left
            for (Track tr : currTracks) {
                currFlow.put(tr, currFlow.get(tr) + bottleNeck);    // Now update the avaliable flow of the track
                if (tr.capacity() == currFlow.get(tr)) { augTracks.remove(tr); }    // Remove if no more cap left
            }

            // Calculate new BFS for the new iteration of the while loop
            shortest = this.shortestPath(start, end, augBuilding, augTracks);
        }
        // After loop we should have updated flow values for each track in the tracks array
        // Look through the tracks going into the sink to see how much flow is being passed

        // When the array is null, check the outgoing flow from source or incoming flow from sink
        int flow = -1;
        for (Track tr : tracks) {
            if (tr.endBuildingId() == end) {
                if (flow == -1) { flow = 0; }
                int i = currFlow.get(tr);
                flow += i;
            }
        }
        return flow;    // The maximum incoming flow to the sink
		
ArrayList<BuildingID> shortestPath(BuildingID source, BuildingID sink, HashMap<BuildingID, Building> buildings, ArrayList<Track> tracks ) {
        // we are going to run the BFS to get the shortest distance from source to sink
        ArrayList<BuildingID> ret = new ArrayList<>();   // Return array
        HashMap<BuildingID, Node> properties = new HashMap<>();     // New Hashmap from buildingID to it's properties
        // Colors White = 0, Grey = 1, Black = 2
        for (BuildingID id : buildings.keySet()) {   // Initialize the array we are going to use
            Node node = new Node(null, 0, -1);
            properties.put(id, node);
            /*System.out.println("ID: "+id.getIdNum()+" -> Color: "+node.getColor()+" Dist: "+node.getDistance());
            System.out.println("ID hashcode: " +System.identityHashCode(id));
            System.out.println("id node hashcode: "+node);
            System.out.println(properties.get(id).getColor());*/
            
        }
        // Now we need to identify the source node - make it's distance 0 and the color grey
        // We keep the previous building as null
        properties.get(source).chColor(1);
        properties.get(source).chDistance(0);

        // Make the priority queue
        ArrayList<BuildingID> queue = new ArrayList<>();  // Made a new arraylist type to dequeue

        // Start BFS while loop
        queue.add(source);
        while (!(queue.isEmpty())) {
            // Dequeue a buildingID
            BuildingID v = this.dequeue(properties, queue);
            /*System.out.println("v hashcode: "+System.identityHashCode(v));
            System.out.println(properties);
            System.out.println("v node hashcode: "+properties.get(v));
            System.out.println(properties.get(v).getColor());*/
            //System.out.println("In shortest path while loop");

            // For all neighbors of v - we need to find all outgoing nodes of v and create a list of
                // all neighbors
            ArrayList<BuildingID> neighbors = new ArrayList<>();
            for (Track tr : tracks) { if (tr.startBuildingId() == v) { neighbors.add(tr.endBuildingId()); } }
            // Now go through each neighbor as BFS would do
            for (BuildingID neigh : neighbors) {
                //System.out.println("Neighbor: "+neigh.getIdNum());
                if (properties.get(neigh).getColor() == 0) {
                    properties.get(neigh).chColor(1);
                    queue.add(neigh);
                    //System.out.println("Adding: "+neigh.getIdNum()+" to queue");
                    properties.get(neigh).chDistance(properties.get(neigh).getDistance() + 1);
                    properties.get(neigh).chPrevious(buildingTable.get(v));
                }
            }
            properties.get(v).chColor(2);
        }
        // Now we should have all of the nodes labelled with their proper distances and colors
        // Look from sink to source with previous' to construct an arraylist of the shortest path
        BuildingID prev = properties.get(sink).getPrevious().id();
        //BuildingID prev = null;
        /*try { prev = properties.get(sink).getPrevious().id(); }
        catch (NullPointerException e) { return ret; }*/
        //System.out.println("Prev is: "+prev+" Source is: "+source);
        ret.addFirst(sink);
        while (null != properties.get(prev).getPrevious()) {
            ret.addFirst(prev);
            prev = properties.get(prev).getPrevious().id();
        }
        //System.out.println("Shortest Path is: "+ret);
        return ret;
    }
	
ArrayList<Track> getTracks(ArrayList<BuildingID> builds, BuildingID source) {
        ArrayList<Track> ret = new ArrayList<>();
        if(1 == builds.size()) {
            for (Track tr : this.tracks) {
                if (tr.startBuildingId().getIdNum() == source.getIdNum()) {
                    ret.add(tr);
                    break;
                }
            }
        } else {
            for (int i = 0; i != builds.size(); i++) {
                //System.out.println(i + "th element");
                for (Track tr : this.tracks) {
                    if (tr.startBuildingId().getIdNum() == builds.get(i).getIdNum() &&
                            tr.endBuildingId().getIdNum() == builds.get(i + 1).getIdNum()) {
                        ret.add(tr);
                        break;
                    }
                }
            }
        }
        return ret;
    }
	
BuildingID dequeue(HashMap<BuildingID, Node> hash, ArrayList<BuildingID> queue) {
        BuildingID ret = null;
        //int buildingID = -1;
        int lowVal = -1;

        for (BuildingID build : queue) {
            int thisDist = hash.get(build).getDistance();
            if (thisDist < lowVal || lowVal == -1) {
                lowVal = thisDist;
                //buildingID = this.buildingTable.get(build).retId();
                ret = build;
            }
        }


        try {
            queue.remove(ret);
            //System.out.println("Removed: "+ret.toString());
        } catch (Exception e) {
            System.err.println("The buildingID: "+ret+" does not exist in the HashMap.");
        }
        /*System.out.println("Coming out of dequque: ");
        System.out.println("Hash is: "+hash);
        System.out.println("Ret is: " + ret);*/
        return ret;     // return the closest building
    }
